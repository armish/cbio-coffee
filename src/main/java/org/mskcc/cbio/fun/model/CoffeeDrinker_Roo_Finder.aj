// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.mskcc.cbio.fun.model;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.mskcc.cbio.fun.model.CoffeeDrinker;

privileged aspect CoffeeDrinker_Roo_Finder {
    
    public static Long CoffeeDrinker.countFindCoffeeDrinkersByEmailEquals(String email) {
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        EntityManager em = CoffeeDrinker.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM CoffeeDrinker AS o WHERE o.email = :email", Long.class);
        q.setParameter("email", email);
        return ((Long) q.getSingleResult());
    }
    
    public static Long CoffeeDrinker.countFindCoffeeDrinkersByEmailLike(String email) {
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        email = email.replace('*', '%');
        if (email.charAt(0) != '%') {
            email = "%" + email;
        }
        if (email.charAt(email.length() - 1) != '%') {
            email = email + "%";
        }
        EntityManager em = CoffeeDrinker.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM CoffeeDrinker AS o WHERE LOWER(o.email) LIKE LOWER(:email)", Long.class);
        q.setParameter("email", email);
        return ((Long) q.getSingleResult());
    }
    
    public static Long CoffeeDrinker.countFindCoffeeDrinkersByFirstNameLike(String firstName) {
        if (firstName == null || firstName.length() == 0) throw new IllegalArgumentException("The firstName argument is required");
        firstName = firstName.replace('*', '%');
        if (firstName.charAt(0) != '%') {
            firstName = "%" + firstName;
        }
        if (firstName.charAt(firstName.length() - 1) != '%') {
            firstName = firstName + "%";
        }
        EntityManager em = CoffeeDrinker.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM CoffeeDrinker AS o WHERE LOWER(o.firstName) LIKE LOWER(:firstName)", Long.class);
        q.setParameter("firstName", firstName);
        return ((Long) q.getSingleResult());
    }
    
    public static Long CoffeeDrinker.countFindCoffeeDrinkersByLastNameLike(String lastName) {
        if (lastName == null || lastName.length() == 0) throw new IllegalArgumentException("The lastName argument is required");
        lastName = lastName.replace('*', '%');
        if (lastName.charAt(0) != '%') {
            lastName = "%" + lastName;
        }
        if (lastName.charAt(lastName.length() - 1) != '%') {
            lastName = lastName + "%";
        }
        EntityManager em = CoffeeDrinker.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM CoffeeDrinker AS o WHERE LOWER(o.lastName) LIKE LOWER(:lastName)", Long.class);
        q.setParameter("lastName", lastName);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<CoffeeDrinker> CoffeeDrinker.findCoffeeDrinkersByEmailEquals(String email) {
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        EntityManager em = CoffeeDrinker.entityManager();
        TypedQuery<CoffeeDrinker> q = em.createQuery("SELECT o FROM CoffeeDrinker AS o WHERE o.email = :email", CoffeeDrinker.class);
        q.setParameter("email", email);
        return q;
    }
    
    public static TypedQuery<CoffeeDrinker> CoffeeDrinker.findCoffeeDrinkersByEmailEquals(String email, String sortFieldName, String sortOrder) {
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        EntityManager em = CoffeeDrinker.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM CoffeeDrinker AS o WHERE o.email = :email");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<CoffeeDrinker> q = em.createQuery(queryBuilder.toString(), CoffeeDrinker.class);
        q.setParameter("email", email);
        return q;
    }
    
    public static TypedQuery<CoffeeDrinker> CoffeeDrinker.findCoffeeDrinkersByEmailLike(String email) {
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        email = email.replace('*', '%');
        if (email.charAt(0) != '%') {
            email = "%" + email;
        }
        if (email.charAt(email.length() - 1) != '%') {
            email = email + "%";
        }
        EntityManager em = CoffeeDrinker.entityManager();
        TypedQuery<CoffeeDrinker> q = em.createQuery("SELECT o FROM CoffeeDrinker AS o WHERE LOWER(o.email) LIKE LOWER(:email)", CoffeeDrinker.class);
        q.setParameter("email", email);
        return q;
    }
    
    public static TypedQuery<CoffeeDrinker> CoffeeDrinker.findCoffeeDrinkersByEmailLike(String email, String sortFieldName, String sortOrder) {
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        email = email.replace('*', '%');
        if (email.charAt(0) != '%') {
            email = "%" + email;
        }
        if (email.charAt(email.length() - 1) != '%') {
            email = email + "%";
        }
        EntityManager em = CoffeeDrinker.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM CoffeeDrinker AS o WHERE LOWER(o.email) LIKE LOWER(:email)");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<CoffeeDrinker> q = em.createQuery(queryBuilder.toString(), CoffeeDrinker.class);
        q.setParameter("email", email);
        return q;
    }
    
    public static TypedQuery<CoffeeDrinker> CoffeeDrinker.findCoffeeDrinkersByFirstNameLike(String firstName) {
        if (firstName == null || firstName.length() == 0) throw new IllegalArgumentException("The firstName argument is required");
        firstName = firstName.replace('*', '%');
        if (firstName.charAt(0) != '%') {
            firstName = "%" + firstName;
        }
        if (firstName.charAt(firstName.length() - 1) != '%') {
            firstName = firstName + "%";
        }
        EntityManager em = CoffeeDrinker.entityManager();
        TypedQuery<CoffeeDrinker> q = em.createQuery("SELECT o FROM CoffeeDrinker AS o WHERE LOWER(o.firstName) LIKE LOWER(:firstName)", CoffeeDrinker.class);
        q.setParameter("firstName", firstName);
        return q;
    }
    
    public static TypedQuery<CoffeeDrinker> CoffeeDrinker.findCoffeeDrinkersByFirstNameLike(String firstName, String sortFieldName, String sortOrder) {
        if (firstName == null || firstName.length() == 0) throw new IllegalArgumentException("The firstName argument is required");
        firstName = firstName.replace('*', '%');
        if (firstName.charAt(0) != '%') {
            firstName = "%" + firstName;
        }
        if (firstName.charAt(firstName.length() - 1) != '%') {
            firstName = firstName + "%";
        }
        EntityManager em = CoffeeDrinker.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM CoffeeDrinker AS o WHERE LOWER(o.firstName) LIKE LOWER(:firstName)");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<CoffeeDrinker> q = em.createQuery(queryBuilder.toString(), CoffeeDrinker.class);
        q.setParameter("firstName", firstName);
        return q;
    }
    
    public static TypedQuery<CoffeeDrinker> CoffeeDrinker.findCoffeeDrinkersByLastNameLike(String lastName) {
        if (lastName == null || lastName.length() == 0) throw new IllegalArgumentException("The lastName argument is required");
        lastName = lastName.replace('*', '%');
        if (lastName.charAt(0) != '%') {
            lastName = "%" + lastName;
        }
        if (lastName.charAt(lastName.length() - 1) != '%') {
            lastName = lastName + "%";
        }
        EntityManager em = CoffeeDrinker.entityManager();
        TypedQuery<CoffeeDrinker> q = em.createQuery("SELECT o FROM CoffeeDrinker AS o WHERE LOWER(o.lastName) LIKE LOWER(:lastName)", CoffeeDrinker.class);
        q.setParameter("lastName", lastName);
        return q;
    }
    
    public static TypedQuery<CoffeeDrinker> CoffeeDrinker.findCoffeeDrinkersByLastNameLike(String lastName, String sortFieldName, String sortOrder) {
        if (lastName == null || lastName.length() == 0) throw new IllegalArgumentException("The lastName argument is required");
        lastName = lastName.replace('*', '%');
        if (lastName.charAt(0) != '%') {
            lastName = "%" + lastName;
        }
        if (lastName.charAt(lastName.length() - 1) != '%') {
            lastName = lastName + "%";
        }
        EntityManager em = CoffeeDrinker.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM CoffeeDrinker AS o WHERE LOWER(o.lastName) LIKE LOWER(:lastName)");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<CoffeeDrinker> q = em.createQuery(queryBuilder.toString(), CoffeeDrinker.class);
        q.setParameter("lastName", lastName);
        return q;
    }
    
}
