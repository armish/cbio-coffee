// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.mskcc.cbio.fun.model.event;

import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.mskcc.cbio.fun.model.CoffeeDrinker;
import org.mskcc.cbio.fun.model.event.DrinkCoffee;

privileged aspect DrinkCoffee_Roo_Finder {
    
    public static Long DrinkCoffee.countFindDrinkCoffeesByCoffeeDrinker(CoffeeDrinker coffeeDrinker) {
        if (coffeeDrinker == null) throw new IllegalArgumentException("The coffeeDrinker argument is required");
        EntityManager em = DrinkCoffee.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM DrinkCoffee AS o WHERE o.coffeeDrinker = :coffeeDrinker", Long.class);
        q.setParameter("coffeeDrinker", coffeeDrinker);
        return ((Long) q.getSingleResult());
    }
    
    public static Long DrinkCoffee.countFindDrinkCoffeesByEventDateEquals(Date eventDate) {
        if (eventDate == null) throw new IllegalArgumentException("The eventDate argument is required");
        EntityManager em = DrinkCoffee.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM DrinkCoffee AS o WHERE o.eventDate = :eventDate", Long.class);
        q.setParameter("eventDate", eventDate);
        return ((Long) q.getSingleResult());
    }
    
    public static Long DrinkCoffee.countFindDrinkCoffeesByEventDateGreaterThan(Date eventDate) {
        if (eventDate == null) throw new IllegalArgumentException("The eventDate argument is required");
        EntityManager em = DrinkCoffee.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM DrinkCoffee AS o WHERE o.eventDate > :eventDate", Long.class);
        q.setParameter("eventDate", eventDate);
        return ((Long) q.getSingleResult());
    }
    
    public static Long DrinkCoffee.countFindDrinkCoffeesByEventDateLessThanEquals(Date eventDate) {
        if (eventDate == null) throw new IllegalArgumentException("The eventDate argument is required");
        EntityManager em = DrinkCoffee.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM DrinkCoffee AS o WHERE o.eventDate <= :eventDate", Long.class);
        q.setParameter("eventDate", eventDate);
        return ((Long) q.getSingleResult());
    }
    
    public static Long DrinkCoffee.countFindDrinkCoffeesByPriceBetween(Double minPrice, Double maxPrice) {
        if (minPrice == null) throw new IllegalArgumentException("The minPrice argument is required");
        if (maxPrice == null) throw new IllegalArgumentException("The maxPrice argument is required");
        EntityManager em = DrinkCoffee.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM DrinkCoffee AS o WHERE o.price BETWEEN :minPrice AND :maxPrice", Long.class);
        q.setParameter("minPrice", minPrice);
        q.setParameter("maxPrice", maxPrice);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<DrinkCoffee> DrinkCoffee.findDrinkCoffeesByCoffeeDrinker(CoffeeDrinker coffeeDrinker) {
        if (coffeeDrinker == null) throw new IllegalArgumentException("The coffeeDrinker argument is required");
        EntityManager em = DrinkCoffee.entityManager();
        TypedQuery<DrinkCoffee> q = em.createQuery("SELECT o FROM DrinkCoffee AS o WHERE o.coffeeDrinker = :coffeeDrinker", DrinkCoffee.class);
        q.setParameter("coffeeDrinker", coffeeDrinker);
        return q;
    }
    
    public static TypedQuery<DrinkCoffee> DrinkCoffee.findDrinkCoffeesByCoffeeDrinker(CoffeeDrinker coffeeDrinker, String sortFieldName, String sortOrder) {
        if (coffeeDrinker == null) throw new IllegalArgumentException("The coffeeDrinker argument is required");
        EntityManager em = DrinkCoffee.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM DrinkCoffee AS o WHERE o.coffeeDrinker = :coffeeDrinker");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<DrinkCoffee> q = em.createQuery(queryBuilder.toString(), DrinkCoffee.class);
        q.setParameter("coffeeDrinker", coffeeDrinker);
        return q;
    }
    
    public static TypedQuery<DrinkCoffee> DrinkCoffee.findDrinkCoffeesByEventDateEquals(Date eventDate) {
        if (eventDate == null) throw new IllegalArgumentException("The eventDate argument is required");
        EntityManager em = DrinkCoffee.entityManager();
        TypedQuery<DrinkCoffee> q = em.createQuery("SELECT o FROM DrinkCoffee AS o WHERE o.eventDate = :eventDate", DrinkCoffee.class);
        q.setParameter("eventDate", eventDate);
        return q;
    }
    
    public static TypedQuery<DrinkCoffee> DrinkCoffee.findDrinkCoffeesByEventDateEquals(Date eventDate, String sortFieldName, String sortOrder) {
        if (eventDate == null) throw new IllegalArgumentException("The eventDate argument is required");
        EntityManager em = DrinkCoffee.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM DrinkCoffee AS o WHERE o.eventDate = :eventDate");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<DrinkCoffee> q = em.createQuery(queryBuilder.toString(), DrinkCoffee.class);
        q.setParameter("eventDate", eventDate);
        return q;
    }
    
    public static TypedQuery<DrinkCoffee> DrinkCoffee.findDrinkCoffeesByEventDateGreaterThan(Date eventDate) {
        if (eventDate == null) throw new IllegalArgumentException("The eventDate argument is required");
        EntityManager em = DrinkCoffee.entityManager();
        TypedQuery<DrinkCoffee> q = em.createQuery("SELECT o FROM DrinkCoffee AS o WHERE o.eventDate > :eventDate", DrinkCoffee.class);
        q.setParameter("eventDate", eventDate);
        return q;
    }
    
    public static TypedQuery<DrinkCoffee> DrinkCoffee.findDrinkCoffeesByEventDateGreaterThan(Date eventDate, String sortFieldName, String sortOrder) {
        if (eventDate == null) throw new IllegalArgumentException("The eventDate argument is required");
        EntityManager em = DrinkCoffee.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM DrinkCoffee AS o WHERE o.eventDate > :eventDate");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<DrinkCoffee> q = em.createQuery(queryBuilder.toString(), DrinkCoffee.class);
        q.setParameter("eventDate", eventDate);
        return q;
    }
    
    public static TypedQuery<DrinkCoffee> DrinkCoffee.findDrinkCoffeesByEventDateLessThanEquals(Date eventDate) {
        if (eventDate == null) throw new IllegalArgumentException("The eventDate argument is required");
        EntityManager em = DrinkCoffee.entityManager();
        TypedQuery<DrinkCoffee> q = em.createQuery("SELECT o FROM DrinkCoffee AS o WHERE o.eventDate <= :eventDate", DrinkCoffee.class);
        q.setParameter("eventDate", eventDate);
        return q;
    }
    
    public static TypedQuery<DrinkCoffee> DrinkCoffee.findDrinkCoffeesByEventDateLessThanEquals(Date eventDate, String sortFieldName, String sortOrder) {
        if (eventDate == null) throw new IllegalArgumentException("The eventDate argument is required");
        EntityManager em = DrinkCoffee.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM DrinkCoffee AS o WHERE o.eventDate <= :eventDate");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<DrinkCoffee> q = em.createQuery(queryBuilder.toString(), DrinkCoffee.class);
        q.setParameter("eventDate", eventDate);
        return q;
    }
    
    public static TypedQuery<DrinkCoffee> DrinkCoffee.findDrinkCoffeesByPriceBetween(Double minPrice, Double maxPrice) {
        if (minPrice == null) throw new IllegalArgumentException("The minPrice argument is required");
        if (maxPrice == null) throw new IllegalArgumentException("The maxPrice argument is required");
        EntityManager em = DrinkCoffee.entityManager();
        TypedQuery<DrinkCoffee> q = em.createQuery("SELECT o FROM DrinkCoffee AS o WHERE o.price BETWEEN :minPrice AND :maxPrice", DrinkCoffee.class);
        q.setParameter("minPrice", minPrice);
        q.setParameter("maxPrice", maxPrice);
        return q;
    }
    
    public static TypedQuery<DrinkCoffee> DrinkCoffee.findDrinkCoffeesByPriceBetween(Double minPrice, Double maxPrice, String sortFieldName, String sortOrder) {
        if (minPrice == null) throw new IllegalArgumentException("The minPrice argument is required");
        if (maxPrice == null) throw new IllegalArgumentException("The maxPrice argument is required");
        EntityManager em = DrinkCoffee.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM DrinkCoffee AS o WHERE o.price BETWEEN :minPrice AND :maxPrice");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<DrinkCoffee> q = em.createQuery(queryBuilder.toString(), DrinkCoffee.class);
        q.setParameter("minPrice", minPrice);
        q.setParameter("maxPrice", maxPrice);
        return q;
    }
    
}
