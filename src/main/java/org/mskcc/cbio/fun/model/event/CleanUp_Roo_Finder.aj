// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.mskcc.cbio.fun.model.event;

import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.mskcc.cbio.fun.model.CoffeeDrinker;
import org.mskcc.cbio.fun.model.event.CleanUp;
import org.mskcc.cbio.fun.model.event.CleanUpType;

privileged aspect CleanUp_Roo_Finder {
    
    public static Long CleanUp.countFindCleanUpsByCleanUpType(CleanUpType cleanUpType) {
        if (cleanUpType == null) throw new IllegalArgumentException("The cleanUpType argument is required");
        EntityManager em = CleanUp.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM CleanUp AS o WHERE o.cleanUpType = :cleanUpType", Long.class);
        q.setParameter("cleanUpType", cleanUpType);
        return ((Long) q.getSingleResult());
    }
    
    public static Long CleanUp.countFindCleanUpsByCoffeeDrinker(CoffeeDrinker coffeeDrinker) {
        if (coffeeDrinker == null) throw new IllegalArgumentException("The coffeeDrinker argument is required");
        EntityManager em = CleanUp.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM CleanUp AS o WHERE o.coffeeDrinker = :coffeeDrinker", Long.class);
        q.setParameter("coffeeDrinker", coffeeDrinker);
        return ((Long) q.getSingleResult());
    }
    
    public static Long CleanUp.countFindCleanUpsByEventDateBetween(Date minEventDate, Date maxEventDate) {
        if (minEventDate == null) throw new IllegalArgumentException("The minEventDate argument is required");
        if (maxEventDate == null) throw new IllegalArgumentException("The maxEventDate argument is required");
        EntityManager em = CleanUp.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM CleanUp AS o WHERE o.eventDate BETWEEN :minEventDate AND :maxEventDate", Long.class);
        q.setParameter("minEventDate", minEventDate);
        q.setParameter("maxEventDate", maxEventDate);
        return ((Long) q.getSingleResult());
    }
    
    public static Long CleanUp.countFindCleanUpsByEventDateEquals(Date eventDate) {
        if (eventDate == null) throw new IllegalArgumentException("The eventDate argument is required");
        EntityManager em = CleanUp.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM CleanUp AS o WHERE o.eventDate = :eventDate", Long.class);
        q.setParameter("eventDate", eventDate);
        return ((Long) q.getSingleResult());
    }
    
    public static Long CleanUp.countFindCleanUpsByEventDateGreaterThanEquals(Date eventDate) {
        if (eventDate == null) throw new IllegalArgumentException("The eventDate argument is required");
        EntityManager em = CleanUp.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM CleanUp AS o WHERE o.eventDate >= :eventDate", Long.class);
        q.setParameter("eventDate", eventDate);
        return ((Long) q.getSingleResult());
    }
    
    public static Long CleanUp.countFindCleanUpsByEventDateLessThanEquals(Date eventDate) {
        if (eventDate == null) throw new IllegalArgumentException("The eventDate argument is required");
        EntityManager em = CleanUp.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM CleanUp AS o WHERE o.eventDate <= :eventDate", Long.class);
        q.setParameter("eventDate", eventDate);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<CleanUp> CleanUp.findCleanUpsByCleanUpType(CleanUpType cleanUpType) {
        if (cleanUpType == null) throw new IllegalArgumentException("The cleanUpType argument is required");
        EntityManager em = CleanUp.entityManager();
        TypedQuery<CleanUp> q = em.createQuery("SELECT o FROM CleanUp AS o WHERE o.cleanUpType = :cleanUpType", CleanUp.class);
        q.setParameter("cleanUpType", cleanUpType);
        return q;
    }
    
    public static TypedQuery<CleanUp> CleanUp.findCleanUpsByCleanUpType(CleanUpType cleanUpType, String sortFieldName, String sortOrder) {
        if (cleanUpType == null) throw new IllegalArgumentException("The cleanUpType argument is required");
        EntityManager em = CleanUp.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM CleanUp AS o WHERE o.cleanUpType = :cleanUpType");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<CleanUp> q = em.createQuery(queryBuilder.toString(), CleanUp.class);
        q.setParameter("cleanUpType", cleanUpType);
        return q;
    }
    
    public static TypedQuery<CleanUp> CleanUp.findCleanUpsByCoffeeDrinker(CoffeeDrinker coffeeDrinker) {
        if (coffeeDrinker == null) throw new IllegalArgumentException("The coffeeDrinker argument is required");
        EntityManager em = CleanUp.entityManager();
        TypedQuery<CleanUp> q = em.createQuery("SELECT o FROM CleanUp AS o WHERE o.coffeeDrinker = :coffeeDrinker", CleanUp.class);
        q.setParameter("coffeeDrinker", coffeeDrinker);
        return q;
    }
    
    public static TypedQuery<CleanUp> CleanUp.findCleanUpsByCoffeeDrinker(CoffeeDrinker coffeeDrinker, String sortFieldName, String sortOrder) {
        if (coffeeDrinker == null) throw new IllegalArgumentException("The coffeeDrinker argument is required");
        EntityManager em = CleanUp.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM CleanUp AS o WHERE o.coffeeDrinker = :coffeeDrinker");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<CleanUp> q = em.createQuery(queryBuilder.toString(), CleanUp.class);
        q.setParameter("coffeeDrinker", coffeeDrinker);
        return q;
    }
    
    public static TypedQuery<CleanUp> CleanUp.findCleanUpsByEventDateBetween(Date minEventDate, Date maxEventDate) {
        if (minEventDate == null) throw new IllegalArgumentException("The minEventDate argument is required");
        if (maxEventDate == null) throw new IllegalArgumentException("The maxEventDate argument is required");
        EntityManager em = CleanUp.entityManager();
        TypedQuery<CleanUp> q = em.createQuery("SELECT o FROM CleanUp AS o WHERE o.eventDate BETWEEN :minEventDate AND :maxEventDate", CleanUp.class);
        q.setParameter("minEventDate", minEventDate);
        q.setParameter("maxEventDate", maxEventDate);
        return q;
    }
    
    public static TypedQuery<CleanUp> CleanUp.findCleanUpsByEventDateBetween(Date minEventDate, Date maxEventDate, String sortFieldName, String sortOrder) {
        if (minEventDate == null) throw new IllegalArgumentException("The minEventDate argument is required");
        if (maxEventDate == null) throw new IllegalArgumentException("The maxEventDate argument is required");
        EntityManager em = CleanUp.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM CleanUp AS o WHERE o.eventDate BETWEEN :minEventDate AND :maxEventDate");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<CleanUp> q = em.createQuery(queryBuilder.toString(), CleanUp.class);
        q.setParameter("minEventDate", minEventDate);
        q.setParameter("maxEventDate", maxEventDate);
        return q;
    }
    
    public static TypedQuery<CleanUp> CleanUp.findCleanUpsByEventDateEquals(Date eventDate) {
        if (eventDate == null) throw new IllegalArgumentException("The eventDate argument is required");
        EntityManager em = CleanUp.entityManager();
        TypedQuery<CleanUp> q = em.createQuery("SELECT o FROM CleanUp AS o WHERE o.eventDate = :eventDate", CleanUp.class);
        q.setParameter("eventDate", eventDate);
        return q;
    }
    
    public static TypedQuery<CleanUp> CleanUp.findCleanUpsByEventDateEquals(Date eventDate, String sortFieldName, String sortOrder) {
        if (eventDate == null) throw new IllegalArgumentException("The eventDate argument is required");
        EntityManager em = CleanUp.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM CleanUp AS o WHERE o.eventDate = :eventDate");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<CleanUp> q = em.createQuery(queryBuilder.toString(), CleanUp.class);
        q.setParameter("eventDate", eventDate);
        return q;
    }
    
    public static TypedQuery<CleanUp> CleanUp.findCleanUpsByEventDateGreaterThanEquals(Date eventDate) {
        if (eventDate == null) throw new IllegalArgumentException("The eventDate argument is required");
        EntityManager em = CleanUp.entityManager();
        TypedQuery<CleanUp> q = em.createQuery("SELECT o FROM CleanUp AS o WHERE o.eventDate >= :eventDate", CleanUp.class);
        q.setParameter("eventDate", eventDate);
        return q;
    }
    
    public static TypedQuery<CleanUp> CleanUp.findCleanUpsByEventDateGreaterThanEquals(Date eventDate, String sortFieldName, String sortOrder) {
        if (eventDate == null) throw new IllegalArgumentException("The eventDate argument is required");
        EntityManager em = CleanUp.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM CleanUp AS o WHERE o.eventDate >= :eventDate");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<CleanUp> q = em.createQuery(queryBuilder.toString(), CleanUp.class);
        q.setParameter("eventDate", eventDate);
        return q;
    }
    
    public static TypedQuery<CleanUp> CleanUp.findCleanUpsByEventDateLessThanEquals(Date eventDate) {
        if (eventDate == null) throw new IllegalArgumentException("The eventDate argument is required");
        EntityManager em = CleanUp.entityManager();
        TypedQuery<CleanUp> q = em.createQuery("SELECT o FROM CleanUp AS o WHERE o.eventDate <= :eventDate", CleanUp.class);
        q.setParameter("eventDate", eventDate);
        return q;
    }
    
    public static TypedQuery<CleanUp> CleanUp.findCleanUpsByEventDateLessThanEquals(Date eventDate, String sortFieldName, String sortOrder) {
        if (eventDate == null) throw new IllegalArgumentException("The eventDate argument is required");
        EntityManager em = CleanUp.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM CleanUp AS o WHERE o.eventDate <= :eventDate");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<CleanUp> q = em.createQuery(queryBuilder.toString(), CleanUp.class);
        q.setParameter("eventDate", eventDate);
        return q;
    }
    
}
