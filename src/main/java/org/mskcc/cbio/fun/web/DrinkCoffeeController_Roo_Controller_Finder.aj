// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.mskcc.cbio.fun.web;

import java.util.Date;
import org.mskcc.cbio.fun.model.CoffeeDrinker;
import org.mskcc.cbio.fun.model.event.DrinkCoffee;
import org.mskcc.cbio.fun.web.DrinkCoffeeController;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect DrinkCoffeeController_Roo_Controller_Finder {
    
    @RequestMapping(params = { "find=ByCoffeeDrinker", "form" }, method = RequestMethod.GET)
    public String DrinkCoffeeController.findDrinkCoffeesByCoffeeDrinkerForm(Model uiModel) {
        uiModel.addAttribute("coffeedrinkers", CoffeeDrinker.findAllCoffeeDrinkers());
        return "drinkcoffees/findDrinkCoffeesByCoffeeDrinker";
    }
    
    @RequestMapping(params = "find=ByCoffeeDrinker", method = RequestMethod.GET)
    public String DrinkCoffeeController.findDrinkCoffeesByCoffeeDrinker(@RequestParam("coffeeDrinker") CoffeeDrinker coffeeDrinker, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("drinkcoffees", DrinkCoffee.findDrinkCoffeesByCoffeeDrinker(coffeeDrinker, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) DrinkCoffee.countFindDrinkCoffeesByCoffeeDrinker(coffeeDrinker) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("drinkcoffees", DrinkCoffee.findDrinkCoffeesByCoffeeDrinker(coffeeDrinker, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "drinkcoffees/list";
    }
    
    @RequestMapping(params = { "find=ByEventDateEquals", "form" }, method = RequestMethod.GET)
    public String DrinkCoffeeController.findDrinkCoffeesByEventDateEqualsForm(Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        return "drinkcoffees/findDrinkCoffeesByEventDateEquals";
    }
    
    @RequestMapping(params = "find=ByEventDateEquals", method = RequestMethod.GET)
    public String DrinkCoffeeController.findDrinkCoffeesByEventDateEquals(@RequestParam("eventDate") @DateTimeFormat(style = "M-") Date eventDate, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("drinkcoffees", DrinkCoffee.findDrinkCoffeesByEventDateEquals(eventDate, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) DrinkCoffee.countFindDrinkCoffeesByEventDateEquals(eventDate) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("drinkcoffees", DrinkCoffee.findDrinkCoffeesByEventDateEquals(eventDate, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "drinkcoffees/list";
    }
    
    @RequestMapping(params = { "find=ByEventDateGreaterThan", "form" }, method = RequestMethod.GET)
    public String DrinkCoffeeController.findDrinkCoffeesByEventDateGreaterThanForm(Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        return "drinkcoffees/findDrinkCoffeesByEventDateGreaterThan";
    }
    
    @RequestMapping(params = "find=ByEventDateGreaterThan", method = RequestMethod.GET)
    public String DrinkCoffeeController.findDrinkCoffeesByEventDateGreaterThan(@RequestParam("eventDate") @DateTimeFormat(style = "M-") Date eventDate, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("drinkcoffees", DrinkCoffee.findDrinkCoffeesByEventDateGreaterThan(eventDate, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) DrinkCoffee.countFindDrinkCoffeesByEventDateGreaterThan(eventDate) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("drinkcoffees", DrinkCoffee.findDrinkCoffeesByEventDateGreaterThan(eventDate, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "drinkcoffees/list";
    }
    
    @RequestMapping(params = { "find=ByEventDateLessThanEquals", "form" }, method = RequestMethod.GET)
    public String DrinkCoffeeController.findDrinkCoffeesByEventDateLessThanEqualsForm(Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        return "drinkcoffees/findDrinkCoffeesByEventDateLessThanEquals";
    }
    
    @RequestMapping(params = "find=ByEventDateLessThanEquals", method = RequestMethod.GET)
    public String DrinkCoffeeController.findDrinkCoffeesByEventDateLessThanEquals(@RequestParam("eventDate") @DateTimeFormat(style = "M-") Date eventDate, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("drinkcoffees", DrinkCoffee.findDrinkCoffeesByEventDateLessThanEquals(eventDate, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) DrinkCoffee.countFindDrinkCoffeesByEventDateLessThanEquals(eventDate) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("drinkcoffees", DrinkCoffee.findDrinkCoffeesByEventDateLessThanEquals(eventDate, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "drinkcoffees/list";
    }
    
    @RequestMapping(params = { "find=ByPriceBetween", "form" }, method = RequestMethod.GET)
    public String DrinkCoffeeController.findDrinkCoffeesByPriceBetweenForm(Model uiModel) {
        return "drinkcoffees/findDrinkCoffeesByPriceBetween";
    }
    
    @RequestMapping(params = "find=ByPriceBetween", method = RequestMethod.GET)
    public String DrinkCoffeeController.findDrinkCoffeesByPriceBetween(@RequestParam("minPrice") Double minPrice, @RequestParam("maxPrice") Double maxPrice, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("drinkcoffees", DrinkCoffee.findDrinkCoffeesByPriceBetween(minPrice, maxPrice, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) DrinkCoffee.countFindDrinkCoffeesByPriceBetween(minPrice, maxPrice) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("drinkcoffees", DrinkCoffee.findDrinkCoffeesByPriceBetween(minPrice, maxPrice, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "drinkcoffees/list";
    }
    
}
