// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.mskcc.cbio.fun.model;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.mskcc.cbio.fun.model.CoffeeDrinker;
import org.mskcc.cbio.fun.model.CoffeeDrinkerDataOnDemand;
import org.springframework.stereotype.Component;

privileged aspect CoffeeDrinkerDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CoffeeDrinkerDataOnDemand: @Component;
    
    private Random CoffeeDrinkerDataOnDemand.rnd = new SecureRandom();
    
    private List<CoffeeDrinker> CoffeeDrinkerDataOnDemand.data;
    
    public CoffeeDrinker CoffeeDrinkerDataOnDemand.getNewTransientCoffeeDrinker(int index) {
        CoffeeDrinker obj = new CoffeeDrinker();
        setEmail(obj, index);
        setFirstName(obj, index);
        setLastName(obj, index);
        return obj;
    }
    
    public void CoffeeDrinkerDataOnDemand.setEmail(CoffeeDrinker obj, int index) {
        String email = "foo" + index + "@bar.com";
        if (email.length() > 50) {
            email = email.substring(0, 50);
        }
        obj.setEmail(email);
    }
    
    public void CoffeeDrinkerDataOnDemand.setFirstName(CoffeeDrinker obj, int index) {
        String firstName = "firstName_" + index;
        if (firstName.length() > 30) {
            firstName = firstName.substring(0, 30);
        }
        obj.setFirstName(firstName);
    }
    
    public void CoffeeDrinkerDataOnDemand.setLastName(CoffeeDrinker obj, int index) {
        String lastName = "lastName_" + index;
        if (lastName.length() > 30) {
            lastName = lastName.substring(0, 30);
        }
        obj.setLastName(lastName);
    }
    
    public CoffeeDrinker CoffeeDrinkerDataOnDemand.getSpecificCoffeeDrinker(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        CoffeeDrinker obj = data.get(index);
        Long id = obj.getId();
        return CoffeeDrinker.findCoffeeDrinker(id);
    }
    
    public CoffeeDrinker CoffeeDrinkerDataOnDemand.getRandomCoffeeDrinker() {
        init();
        CoffeeDrinker obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return CoffeeDrinker.findCoffeeDrinker(id);
    }
    
    public boolean CoffeeDrinkerDataOnDemand.modifyCoffeeDrinker(CoffeeDrinker obj) {
        return false;
    }
    
    public void CoffeeDrinkerDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = CoffeeDrinker.findCoffeeDrinkerEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'CoffeeDrinker' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<CoffeeDrinker>();
        for (int i = 0; i < 10; i++) {
            CoffeeDrinker obj = getNewTransientCoffeeDrinker(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
